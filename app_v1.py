import pandas as pd
import streamlit as st
from PIL import Image
from EDA_model_preporation import open_data, preprocess_data, transform, load_model_and_predict


def process_main_page():
    show_main_page()
    process_side_bar_inputs()


def show_main_page():
    image = Image.open('data/usedCars.png')

    st.set_page_config(
        layout="wide",
        initial_sidebar_state="auto",
        page_title="Old car price prediction",
        page_icon=image,

    )

    st.write(
        """
        # Prediction of old car price
        """
    )
    st.write("Picture was generated by Denzo AI: https://dezgo.com/license")
    st.image(image, width=200)



def write_user_data(df, selling_price):
    st.write("# Your data")
    st.write(df)
    st.write("# Your price")
    st.write(f"### {selling_price}")


def write_prediction(recommendation, hi_price, low_price):
    st.write("## Price analyze")
    st.write(f"### Your price is {recommendation}")
    #
    st.write("## Price for a car like yours is:")
    st.write(f"### {round(low_price, 2)} - {round(hi_price, 2)}")
    #
    # st.write("## Вероятность предсказания")
    # st.write(prediction_probas)


def process_side_bar_inputs():
    st.sidebar.header('User data')
    user_input_df, selling_price = sidebar_input_features()

    target_feature = 'selling_price'  # target model
    # lists of columns
    # included in model
    to_model_list = ['name', 'fuel', 'transmission', 'year', 'seats', 'km_driven',
                     'seller_type', 'engine', 'engine_type', 'max_power', 'torque']

    write_user_data(user_input_df, selling_price)  # print user data to screen
    train_df = open_data()

    train_x_df, train_y_df = preprocess_data(train_df, to_model_list, target_feature, test=True)  # split_data(train_df)
    full_x_df = pd.concat((user_input_df, train_x_df), axis=0)

    preprocessed_x_df = transform(full_x_df)

    user_x_df = preprocessed_x_df[:1]

    # prediction, prediction_probas = load_model_and_predict(user_x_df)
    prediction, recommendation, hi_price, low_price = load_model_and_predict(user_x_df, selling_price)
    write_prediction(recommendation, hi_price, low_price)   # , prediction_probas)


def sidebar_input_features():
    selling_price = st.sidebar.number_input('Set your price', min_value=100000)
    name = st.sidebar.selectbox("Brand", ("Ford", "Tata", "Honda"))
    transmission = st.sidebar.selectbox("Transmission", ("Manual", "Automatic"))
    fuel = st.sidebar.selectbox("Fuel", ("Diesel", "Petrol", "LPG", "CNG"))

    year = st.sidebar.slider("Year of prod", min_value=1997, max_value=2023, value=2018, step=1)

    seats = st.sidebar.selectbox("Seats", (7.0, 5.0, 14.0, 10.0))
    km_driven = st.sidebar.slider("Km driven", min_value=0, max_value=300000, value=30000, step=1)
    engine = st.sidebar.slider("Engine volume",
                               min_value=600, max_value=3800, value=1460, step=1)
    power = st.sidebar.slider("Max power", min_value=0, max_value=400, value=90, step=1)
    torque = st.sidebar.slider("Torque",
                               min_value=0, max_value=1870, value=180, step=1)
    # seller_type = st.sidebar.selectbox("Seller", ("Individual", "Dealer", "Trustmark Dealer"))
    # engine_type = st.sidebar.selectbox("Тип двигателя", ("CC", "unknown"))

    # to_model_list = ['name', 'fuel', 'transmission', 'year', 'seats', 'km_driven',
    #                  'seller_type', 'engine', 'engine_type', 'max_power', 'torque']
    data = {
        "name": name,
        "fuel": fuel,
        "transmission": transmission,  # translatetion[transmission],
        "year": year,
        "seats": seats,
        "km_driven": km_driven,
        "seller_type": "Individual",
        'engine': engine,
        'engine_type': "CC",
        'max_power': power,
        'torque': torque
    }

    df = pd.DataFrame(data, index=[0])

    return df, selling_price


if __name__ == "__main__":
    process_main_page()
